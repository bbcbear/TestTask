#!/usr/bin/env node

/*!
 * Module dependencies.
 */

var http = require('http');
var fs = require('fs');
var join = require('path').join;
var client = require('../app/helpers/redis')();

/*!
 * View file.
 */

var index = fs.readFileSync(join(__dirname, '../app/views/index.html'));

/*!
 * Get port from environment and store in Koa.
 */

var port = normalizePort(process.env.PORT || '3000');

/*!
 * Create HTTP server.
 */

var server = http.createServer(function (req, res) {
  res.writeHead(200, { 'Content-Type': 'text/html'});
  client.llen('messages', function (err, length) {
    res.end(index.toString().replace('{{count}}', length));
  });
});

/*!
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/*!
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/*!
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
